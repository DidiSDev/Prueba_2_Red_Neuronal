# NECESITAMOS ÚNICAMENTE TENSORFLOW, NUMPY Y MATPLOTLIB PARA EL GRÁFICO
import tensorflow as tf  # IMPORTA TENSORFLOW, UNA BIBLIOTECA DE CÓDIGO ABIERTO PARA APRENDIZAJE AUTOMÁTICO.
import numpy as np       # IMPORTA NUMPY, UNA BIBLIOTECA PARA MANIPULAR ARRAYS Y MATRICES NUMÉRICAS.



# """DEFINICION DE LOS DATOS DE ENTRADA Y SALIDA"""

# CREAMOS UN ARRAY CON TEMPERATURAS EN GRADOS CELSIUS
celsius = np.array([-40, -10, 0, 8, 15, 22, 38], dtype=float)
# ESTE ARRAY CONTIENE LOS VALORES DE CELSIUS QUE UTILIZAREMOS COMO ENTRADA.
# np.array CONVIERTE LA LISTA PROPORCIONADA EN UN ARRAY; dtype=float ASEGURA NÚMEROS CON DECIMALES.

# CREAMOS UN ARRAY CON LAS TEMPERATURAS CORRESPONDIENTES EN GRADOS FAHRENHEIT
farenheit = np.array([-40, 14, 32, 46, 59, 72, 100], dtype=float)
# ESTE ARRAY CONTIENE LOS VALORES DE FAHRENHEIT QUE SERÁN LOS RESULTADOS QUE EL MODELO DEBE APRENDER A PREDICTAR.



# """DEFINICIÓN DE LA CAPA Y CONSTRUCCIÓN DEL MODELO"""

# DEFINIMOS UNA CAPA DENSAMENTE CONECTADA CON UNA SOLA NEURONA
capa = tf.keras.layers.Dense(units=1, input_shape=[1])  # -> LA CAPA SE AUTOREGISTRA CON 1 NEURONA.
# ESTA CAPA SE ENCARGARÁ DE REALIZAR LA TRANSFORMACIÓN LINEAL ENTRE LAS TEMPERATURAS DE CELSIUS Y FAHRENHEIT.

# CONSTRUIMOS UN MODELO SECUENCIAL DE KERAS CON LA CAPA DEFINIDA
modelo = tf.keras.Sequential([capa])
# UN MODELO SECUENCIAL ES UNA PILA LINEAL DE CAPAS. AQUÍ, SOLO TENEMOS UNA CAPA,
# PERO EN MODELOS MÁS COMPLEJOS SE PUEDEN AÑADIR MÁS CAPAS PARA CAPTURAR PATRONES MÁS COMPLEJOS.


# """CONFIGURACIÓN DEL PROCESO DE APRENDIZAJE DEL MODELO"""
# COMPILAMOS EL MODELO, ESPECIFICANDO EL OPTIMIZADOR Y LA FUNCIÓN DE PÉRDIDA
modelo.compile(
    optimizer=tf.keras.optimizers.Adam(0.1),  # UTILIZA EL OPTIMIZADOR ADAM CON UNA TASA DE APRENDIZAJE DE 0.1.
    loss='mean_squared_error'                   # USA EL ERROR CUADRÁTICO MEDIO COMO FUNCIÓN DE PÉRDIDA.
)
# EL OPTIMIZADOR ACTUALIZA LOS PESOS DURANTE EL ENTRENAMIENTO, MIENTRAS QUE LA FUNCIÓN DE PÉRDIDA
# MIDE LA DIFERENCIA ENTRE LAS PREDICCIONES DEL MODELO Y LOS VALORES REALES.



# """ENTRENAMIENTO DEL MODELO"""
print("Comenzando entrenamiento...")

# ENTRENAMOS EL MODELO CON LOS DATOS DE CELSIUS Y FAHRENHEIT, DURANTE 500 ÉPOCAS
historial = modelo.fit(celsius, farenheit, epochs=500, verbose=False)
# modelo.fit INICIA EL ENTRENAMIENTO.:
#   - celsius: ENTRADAS DEL MODELO.
#   - farenheit: SALIDAS ESPERADAS.
#   - epochs=500: EL MODELO VE CADA DATOS 500 VECES.
#   - verbose=False: OCULTA LA SALIDA DE CADA ÉPOCA.
# EL HISTORIAL DEL ENTRENAMIENTO SE GUARDA EN 'historial' PARA PODER ANALIZAR LA PÉRDIDA.

print("Modelo entrenado!! :)")



# GRAFICANDO LA PÉRDIDA DURANTE EL ENTRENAMIENTO
import matplotlib.pyplot as plt  # IMPORTA MATPLOTLIB PARA CREAR GRÁFICOS.




plt.xlabel("€ Epoca")

# ESTABLECE LA ETIQUETA DEL EJE X DEL GRÁFICO.
# (OBSERVA QUE "€ Epoca" PARECE TENER UN ERROR CON EL SÍMBOLO DE EURO, PERO NO MODIFICAMOS EL TEXTO.)


plt.ylabel("Magnitud de pérdida")
# ESTABLECE LA ETIQUETA DEL EJE Y DEL GRÁFICO CON EL VALOR DE LA PÉRDIDA EN CADA ÉPOCA.



plt.plot(historial.history["loss"])
# GRAFICA LA PÉRDIDA REGISTRADA EN CADA ÉPOCA DURANTE EL ENTRENAMIENTO.
# 'historial.history["loss"]' CONTIENE LOS VALORES DE PÉRDIDA POR ÉPOCA.

plt.show()
# MUESTRA EL GRÁFICO GENERADO EN UNA VENTANA, PERMITIÉNDONOS VER LA EVOLUCIÓN DE LA PÉRDIDA.


# PREDICCIÓN CON EL MODELO ENTRENADO

print("Hagamos una predicción!")

# UTILIZAMOS EL MODELO PARA PREDICIR EL VALOR DE FAHRENHEIT PARA 512°C
resultado = modelo.predict(np.array([[512.0]]))
# modelo.predict:
#   - RECIBE UN ARRAY CON LOS DATOS DE ENTRADA.
#   - DEVUELVE LA PREDICCIÓN DEL MODELO.
# AQUÍ, SE INTENTA PREDECIR LA TEMPERATURA EN FAHRENHEIT PARA UN VALOR DE 512°C.

print("El resultado es " + str(resultado[0][0]) + " Fahrenheit!")
# CONVIERTE LA PREDICCIÓN A CADENA DE TEXTO E IMPRIME EL RESULTADO FINAL.
